# -*- coding: utf-8 -*-
# vicenté quantic cabviva
#

# Les modules personnels.
import globaliste

import inspect
from typing import Callable

# lino() Pour consulter le programme grâce au suivi des print’s
lineno: Callable[[], int] = lambda: inspect.currentframe().f_back.f_lineno


def print_hi():
    """Traité des tétracordes avec comme unique base une liste de tuples (nom_gam, mod_num).
        Consulter les tétras de k_gam/mod_num, afin d'en trier ceux qui sont semblables."""
    "# Déclaration du dictionnaire qui englobe les dictionnaires et les listes tétras."
    # dico_tetras = {}  # {'k_gam': {}, 'di_ages': {}}
    "# liste des gammes primordiales énumérées : k_gam."
    k_gam = [('o45x', '123400000567'), ('o46-', '123400056007'), ('o4', '123400050607'), ('o46+', '123400050067'),
             ('o45-', '123400500607'), ('o54-', '123405000607'), ('*5', '123450000607'), ('-34', '123040050607'),
             ('o63-', '123045000607'), ('o35x', '123004000567'), ('o35+', '123004005607'), ('o3', '123004050607'),
             ('o36+', '123004050067'), ('o35-', '123004500607'), ('o34x', '123000045607'), ('-24', '120340050607'),
             ('-25o', '120345000607'), ('-23', '120304050607'), ('-25+', '120034005607'), ('-26', '120034056007'),
             ('-26o', '120034560007'), ('-2', '120034050607'), ('-26+', '120034050067'), ('-25', '120034500607'),
             ('-45x', '102340000567'), ('-45+', '102340005607'), ('-46o', '102340560007'), ('*6', '102345600007'),
             ('-4', '102340050607'), ('o65-', '102345060007'), ('-46+', '102340050067'), ('-45', '102340500607'),
             ('o5', '102345000607'), ('-35+', '102304005607'), ('-36', '102304056007'), ('-3', '102304050607'),
             ('-36+', '102304050067'), ('-35', '102304500607'), ('-34x', '102300045607'), ('x5', '102034000567'),
             ('-6', '102034056007'), ('o6', '102034560007'), ('+56', '102034005067'), ('0', '102034050607'),
             ('-56', '102034506007'), ('+6', '102034050067'), ('-5', '102034500607'), ('-56+', '102034500067'),
             ('+45x', '102030400567'), ('x45+', '102030040567'), ('x46+', '102030045067'), ('^4', '102030004567'),
             ('+35x', '102003400567'), ('+34', '102003045607'), ('+34x', '102003004567'), ('x3', '102000345607'),
             ('x36+', '102000345067'), ('^3', '102000034567'), ('+25x', '100234000567'), ('+26-', '100234056007'),
             ('+2', '100234050607'), ('+26', '100234050067'), ('+25-', '100234500607'), ('+23x', '100200345607'),
             ('x26-', '100023456007'), ('^2', '100002345607')]
    "# Dico des listes des énumérations diatoniques primordiales : di_ages."
    di_ages = {
        1: ['123400000567', '123000004567', '120000034567', '100000234567', '123456700000', '123456000007',
            '123450000067'],
        2: ['123400056007', '123000450067', '120003400567', '100023004567', '120034567000', '100234560007',
            '123450006700'],
        3: ['123400050607', '123000405067', '120003040567', '100020304567', '102034567000', '102345600070',
            '123450006070'],
        4: ['123400050067', '123000400567', '120003004567', '100020034567', '100234567000', '123456000700',
            '123450006007'],
        5: ['123400500607', '123004005067', '120030040567', '100200304567', '100203456700', '102345600700',
            '123450060070'],
        6: ['123405000607', '123040005067', '120300040567', '102000304567', '100020345670', '102345607000',
            '123450600070'],
        7: ['123450000607', '123400005067', '123000040567', '120000304567', '100002034567', '102345670000',
            '123456000070'],
        8: ['123040050607', '120300405067', '102003040567', '100203045670', '102034560700', '102345060070',
            '123405006070'],
        9: ['123045000607', '120340005067', '102300040567', '120003045670', '100020345607', '102345067000',
            '123405600070'],
        10: ['123004000567', '120030004567', '100200034567', '100023456700', '123456007000', '123450060007',
             '123400500067'],
        11: ['123004005607', '120030045067', '100200340567', '100230456700', '120345600700', '102345006007',
             '123400500670'],
        12: ['123004050607', '120030405067', '100203040567', '102030456700', '102034560070', '102345006070',
             '123400506070'],
        13: ['123004050067', '120030400567', '100203004567', '102003456700', '100234560070', '123450060700',
             '123400506007'],
        14: ['123004500607', '120034005067', '100230040567', '120030456700', '100203456007', '102345006700',
             '123400560070'],
        15: ['123000045607', '120000345067', '100002340567', '123045670000', '120345600007', '102345000067',
             '123400005670'],
        16: ['120340050607', '102300405067', '120030405670', '100203045607', '102034506700', '102340560070',
             '123045006070'],
        17: ['120345000607', '102340005067', '123000405670', '120003045607', '100020345067', '102340567000',
             '123045600070'],
        18: ['120304050607', '102030405067', '102030405670', '102030456070', '102034506070', '102340506070',
             '123040506070'],
        19: ['120034005607', '100230045067', '120034056700', '100230456007', '120345006700', '102340056007',
             '123004500670'],
        20: ['120034056007', '100230450067', '120340056700', '102300456007', '120034500670', '100234005607',
             '123004506700'],
        21: ['120034560007', '100234500067', '123400056700', '123000456007', '120003450067', '100023400567',
             '123004567000'],
        22: ['120034050607', '100230405067', '120304056700', '102030456007', '102034500670', '102340056070',
             '123004506070'],
        23: ['120034050067', '100230400567', '120300456700', '102003456007', '100234500670', '123400560700',
             '123004506007'],
        24: ['120034500607', '100234005067', '123004056700', '120030456007', '100203450067', '102340056700',
             '123004560070'],
        25: ['102340000567', '123000045670', '120000345607', '100002345067', '123405670000', '123045600007',
             '120345000067'],
        26: ['102340005607', '123000450670', '120003405607', '100023045067', '120340567000', '102304560007',
             '120345000670'],
        27: ['102340560007', '123045000670', '120340005607', '102300045067', '120003405670', '100023045607',
             '120345067000'],
        28: ['102345600007', '123450000670', '123400005607', '123000045067', '120000340567', '100002304567',
             '120345670000'],
        29: ['102340050607', '123004050670', '120030405607', '100203045067', '102034056700', '102304560070',
             '120345006070'],
        30: ['102345060007', '123405000670', '123040005607', '120300045067', '102000340567', '100023045670',
             '120345607000'],
        31: ['102340050067', '123004005670', '120030045607', '100200345067', '100234056700', '123045600700',
             '120345006007'],
        32: ['102340500607', '123040050670', '120300405607', '102003045067', '100203405670', '102304560700',
             '120345060070'],
        33: ['102345000607', '123400050670', '123000405607', '120003045067', '100020340567', '102304567000',
             '120345600070'],
        34: ['102304005607', '120300450670', '102003405607', '100230450670', '120340560700', '102304506007',
             '120340500670'],
        35: ['102304056007', '120304500670', '102034005607', '102300450670', '120034056070', '100230450607',
             '120340506700'],
        36: ['102304050607', '120304050670', '102030405607', '102030450670', '102034056070', '102304506070',
             '120340506070'],
        37: ['102304050067', '120304005670', '102030045607', '102003450670', '100234056070', '123045060700',
             '120340506007'],
        38: ['102304500607', '120340050670', '102300405607', '120030450670', '100203405607', '102304506700',
             '120340560070'],
        39: ['102300045607', '120003450670', '100023405607', '123045067000', '120340560007', '102304500067',
             '120340005670'],
        40: ['102034000567', '102300045670', '120003456070', '100023450607', '123405067000', '123040560007',
             '120304500067'],
        41: ['102034056007', '102304500670', '120340056070', '102300450607', '120034050670', '100230405607',
             '120304506700'],
        42: ['102034560007', '102345000670', '123400056070', '123000450607', '120003405067', '100023040567',
             '120304567000'],
        43: ['102034005067', '102300405670', '120030456070', '100203450607', '102340506700', '123040560070',
             '120304500607'],
        44: ['102034050607', '102304050670', '120304056070', '102030450607', '102034050670', '102304056070',
             '120304506070'],
        45: ['102034506007', '102340500670', '123040056070', '120300450607', '102003405067', '100230405670',
             '120304560700'],
        46: ['102034050067', '102304005670', '120300456070', '102003450607', '100234050670', '123040560700',
             '120304506007'],
        47: ['102034500607', '102340050670', '123004056070', '120030450607', '100203405067', '102304056700',
             '120304560070'],
        48: ['102034500067', '102340005670', '123000456070', '120003450607', '100023405067', '123040567000',
             '120304560007'],
        49: ['102030400567', '102030045670', '102003456070', '100234506070', '123405060700', '123040506007',
             '120304050067'],
        50: ['102030040567', '102003045670', '100203456070', '102345060700', '123405060070', '123040500607',
             '120304005067'],
        51: ['102030045067', '102003405670', '100230456070', '120345060700', '102340506007', '123040500670',
             '120304005607'],
        52: ['102030004567', '102000345670', '100023456070', '123450607000', '123405060007', '123040500067',
             '120304000567'],
        53: ['102003400567', '100230045670', '120034560700', '100234506007', '123405006700', '123040056007',
             '120300450067'],
        54: ['102003045607', '100203450670', '102340560700', '123045060070', '120340500607', '102304005067',
             '120300405670'],
        55: ['102003004567', '100200345670', '100234560700', '123450600700', '123405006007', '123040050067',
             '120300400567'],
        56: ['102000345607', '100023450670', '123405607000', '123045060007', '120340500067', '102304000567',
             '120300045670'],
        57: ['102000345067', '100023405670', '123045607000', '120345060007', '102340500067', '123040005670',
             '120300045607'],
        58: ['102000034567', '100002345670', '123456070000', '123450600007', '123405000067', '123040000567',
             '120300004567'],
        59: ['100234000567', '123000456700', '120003456007', '100023450067', '123400567000', '123004560007',
             '120034500067'],
        60: ['100234056007', '123045006700', '120340056007', '102300450067', '120034005670', '100230045607',
             '120034506700'],
        61: ['100234050607', '123040506700', '120304056007', '102030450067', '102034005670', '102300456070',
             '120034506070'],
        62: ['100234050067', '123040056700', '120300456007', '102003450067', '100234005670', '123004560700',
             '120034506007'],
        63: ['100234500607', '123400506700', '123004056007', '120030450067', '100203400567', '102300456700',
             '120034560070'],
        64: ['100200345607', '100234506700', '123405600700', '123045006007', '120340050067', '102300400567',
             '120030045670'],
        65: ['100023456007', '123450067000', '123400560007', '123004500067', '120034000567', '100230004567',
             '120003456700'],
        66: ['100002345607', '123450670000', '123405600007', '123045000067', '120340000567', '102300004567',
             '120000345670']
    }
    (lineno(), "di_ages", di_ages)
    # 173 di_ages {1: ['123400000567', '123000004567', '120000034567', '100000234567',...]}
    n_gam = [n for n, _ in k_gam]  # Liste les noms des gammes.
    e_gam = [e for _, e in k_gam]  # Liste les gammes énumérées.
    ("n_gam", n_gam, len(n_gam), "\ne_gam", e_gam, len(e_gam))
    # n_gam ['o45x', 'o46-', 'o4', 'o46+', 'o45-', 'o54-', '*5', '-34', 'o63-', 'o35x', 'o35+',     66
    # e_gam ['1234000005678', '1234000560078', '1234000506078', '1234000500678', '1234005006078',        66
    # La séquence des gammes de di_ages est la même que celle de e_gam.
    "# Collecte des tétras inférieurs et supérieurs de chaque gamme"
    t_inf, t_sup = [], []  # Listes : tétras[inf, sup].
    union_t, ponton_t, super_t, infer_t = {}, {}, {}, {}  # , union_t[int, sup], ponton_t[int-sup], super_t[sup] unic
    t_global = {}  # Dictionnaire des localisations tétras.
    for e_num in e_gam:
        nom = n_gam[e_gam.index(e_num)] + "_"
        e_num += "8"
        inf, sup, gen1, gen2, pos1, pos2 = True, False, "", "", "", ""
        tet1, tet2 = 0, 0
        for e in e_num:
            if inf and tet1 < 5 and int(e) in (0, 1, 2, 3, 4):
                if int(e) == 0:
                    gen1 += "0"
                else:
                    tet1 += 1
                    gen1 += str(tet1)
                if int(e) == 4:
                    pos1 = nom + e_num + ".inf"
                    inf = False
                ("e_num", e_num, "e", e, "gen1", gen1)
            if int(e) == 5:
                sup = True
            if sup and int(e) in (0, 5, 6, 7, 8):
                if int(e) == 0:
                    gen2 += "0"
                else:
                    tet2 += 1
                    gen2 += str(tet2)
                if int(e) == 8:
                    pos2 = nom + e_num + ".sup"
                ("e_num", e_num, "e", e, "\t\t\tgen2", gen2)

        # Enregistrement des tétras conformément formés.
        if gen1 not in t_inf:  # Au niveau du tétra inférieur.
            t_inf.append(gen1)
        if gen2 not in t_sup:  # Au niveau du tétra supérieur.
            t_sup.append(gen2)
        "# Établissement des tétras uniques indexés aux noms, aux énumérations et à leurs positions[inf/sup]"
        # Dictionnaire t_global inf
        if gen1 not in t_global.keys():
            t_global[gen1] = [pos1]
        elif gen1 in t_global.keys():
            t_global[gen1].append(pos1)
        # Dictionnaire t_global sup
        if gen2 not in t_global.keys():
            t_global[gen2] = [pos2]
        elif gen2 in t_global.keys():
            t_global[gen2].append(pos2)
        # print()
    (lineno(), t_inf, len(t_inf), "\n", t_sup, len(t_sup), "\n\nt_global", t_global.keys(), len(t_global.keys()))
    # 230 ['1234', '12304', '123004', '12300004', '12034', '120304'...] 23
    # ... ['1234', '120034', '102034', '100234', '1002034', '10002034'...] 14
    # ... t_global dict_keys(['1234', '120034', '102034', '100234', '1002034'...] 28
    # t_global['1234'] | '1234': ['o45x.1234000005678.inf', 'o45x.1234000005678.sup'

    "# Initialisation du dictionnaire d'unisson des tétracordes_inf et des tétracordes_sup, avec les doublons."
    for i_inf in t_inf:
        if i_inf in t_sup:
            ponton_t[i_inf] = i_inf
            union_t[i_inf] = i_inf
            (lineno(), "if i_inf in t_sup ", i_inf)
        else:
            infer_t[i_inf] = i_inf
            union_t[i_inf] = i_inf
            (lineno(), " * i_inf not in t_sup ", i_inf)
    for i_sup in t_sup:
        if i_sup not in t_inf:
            super_t[i_sup] = i_sup
            union_t[i_sup] = i_sup
            (lineno(), "if i_sup in t_inf ", i_sup)
    ("\n", "union", union_t, len(union_t), "\n\nponton", ponton_t, len(ponton_t), "\nsuper", super_t, len(super_t))
    ("infer", infer_t, len(infer_t))
    # union {'1234': '1234', '12304': '12304', '123004': '123004', '12300004': '12300004', ...] 28
    # ponton {'1234': '1234', '12034': '12034', '120034': '120034', '10234': '10234', ...] 9
    # super {'1002034': '1002034', '10002034': '10002034', '100002034': '100002034', ...] 5
    # infer {'12304': '12304', '123004': '123004', '12300004': '12300004', '120304': '120304', ...] 14

    "# Mise en ordre croissant des tétracordes des clés du dictionnaire union_t."
    t_ordre = {}  # Dico clé = numéro croissant, valeur = tétra croissant
    t_or = [int(t) for t in union_t.keys()]
    t_or.sort()
    t_or = [str(t) for t in t_or]
    (lineno(), "t_or", t_or, len(t_or))
    # 263 t_or ['1234', '10234', '12034', '12304', '100234', '102034', '102304',...] 28
    for t in range(len(t_or)):
        t_ordre[t + 1] = t_or[t]
    (lineno(), "t_ordre", t_ordre, len(t_ordre))
    # 267 t_ordre {1: '1234', 2: '10234', 3: '12034', 4: '12304', 5: '100234', 6: '102034',...] 28

    "À transmettre au module globaliste.py"
    dico_tetras = {'t_inf': t_inf, 't_sup': t_sup, 't_global': t_global, 'union_t': union_t, 'ponton_t': ponton_t,
                   'super_t': super_t, 'infer_t': infer_t, 't_ordre': t_ordre}
    globaliste.globe(dico_tetras)


if __name__ == '__main__':
    print_hi()
